#!/usr/bin/env python3

import logging
import os
import os.path
import subprocess
import zipfile
import http.server
import socketserver
import shutil

PORT = 8080

logging.basicConfig(level=logging.DEBUG)

class Subject(object):
    def __init__(self, common_name, organization = "DS", country = "US", unit = "CNDB"):
        self.common_name = common_name
        self.organization = organization
        self.country = country
        self.unit = unit

    def __repr__(self):
        return "%s(cn=%s, o=%s, c=%s, u=%s)" \
            % (self.__class__.__name__, self.common_name, self.organization, self.country, self.unit)


class KeytoolSubject(Subject):
    def __str__(self):
        return "cn=%s, ou=%s, o=%s, c=%s" % (self.common_name, self.unit, self.organization, self.country)


class Keystore(object):
    def __init__(self, path, authority, name, password, subject, size = 2048, valid = 365):
       
        if name is None:
            raise RuntimeError("corrupt keystore entry; missing keystore name")
        if password is None:
            raise RuntimeError("corrupt keystore entry; missing keystore password")

        self.base = os.path.abspath(path)
        self.name = name
        self.authority = authority

        self.keystore = os.path.join(self.base, name, "identity.jks")
        self.truststore = os.path.join(self.base, name, "trustStore.jks")

        self.p12 = os.path.join(self.base, name, "%s.p12" % self.name)
        self.csr = os.path.join(self.base, name, "%s.csr" % name)
        self.crt = os.path.join(self.base, name, "%s.crt" % name)
        self.key = os.path.join(self.base, name, "%s.key" % name)
        self.config = os.path.join(self.base, self.name, "config.json")
        self.password = password
        self.size = size
        self.subject = KeytoolSubject(self.name, subject)
        self.valid = valid

        mkdirs(os.path.join(self.base, name))

    def generate(self):
        if os.path.exists(self.truststore):
            logging.warning("%s already exists, skipping keystore generation...", self.truststore)
            return

        # Generate the node key
        #
        # It looks as though a key password is required (if you do not pass the
        # argument, then keytool prompts for the password on STDIN).  Cassandra
        # it seems, depends upon the key and store passwords being identical, (and
        # indeed, keytool itself will attempt to use the -storepass when -keypass
        # is omitted).  So much WTF.
        command = [
            "keytool",
            "-genkeypair",
            "-dname",     str(self.subject),
            "-storetype", "PKCS12",
            "-keyalg",    "RSA",
            "-alias",     self.name,
            "-validity",  str(self.valid),
            "-storepass", self.password,
            "-keypass",   self.password,
            "-keystore",  self.keystore
        ]
        if not run_command(command):
            raise RuntimeError("CA key generation failed")

        #Export the key to a PEM format
        command = [
            "keytool", 
            "-importkeystore",
            "-srckeystore", self.keystore,
            "-destkeystore", self.p12,
            "-deststoretype", "PKCS12",
            "-srcalias", self.name,
            "-srcstorepass", self.password,
            "-deststorepass", self.password,
            "-destkeypass", self.password,
        ]
        if not run_command(command):
            raise RuntimeError("PKCS12 export failed")

        command = [
            "openssl", 
            "pkcs12", 
            "-in", self.p12,
            "-passin", "pass:%s" % self.password, 
            "-nodes",
            "-nocerts", 
            "-out", self.key
        ]

        if not run_command(command):
            raise RuntimeError("KEY export failed")

        # Generate a certificate signing request.
        command = [
            "keytool",
            "-certreq",
            "-dname",     str(self.subject),
            "-alias",     self.name,
            "-keystore",  self.keystore,
            "-file",      self.csr,
            "-keypass",   self.password,
            "-storepass", self.password
        ]
        if not run_command(command):
            raise RuntimeError("signing request generation failed")

        # Sign (and verify).
        command = [
            "openssl",
            "x509",
            "-req",
            "-CAcreateserial",
            "-in",    self.csr,
            "-CA",    self.authority.certificate.filename,
            "-CAkey", self.authority.key.filename,
            "-days",  str(self.valid),
            "-out",   self.crt,
            "-sha256"
        ]

        if not run_command(command):
            raise RuntimeError("certificate signing failed")

        command = [
            "openssl",
            "verify",
            "-CAfile", self.authority.certificate.filename,
            self.crt
        ]
        if not run_command(command):
            raise RuntimeError("certificate verification failed")

        # Before we can import the signed certificate, the signer must be trusted,
        # either with a trust entry in this keystore, or with one in the system
        # truststore, aka 'cacerts', (provided -trustcacerts is passed).
        command = [
            "keytool",
            "-importcert",
            "-storetype", "PKCS12",
            "-noprompt",
            "-trustcacerts",
            "-file",      self.authority.certificate.filename,
            "-storepass", self.password,
            "-keystore",  self.keystore
        ]
        if not run_command(command):
            raise RuntimeError("import of CA cert failed")

        # Import the CA signed certificate.
        command = [
            "keytool",
            "-importcert",
            "-noprompt",
            "-storetype", "PKCS12",
            "-trustcacerts",
            "-file",      self.crt,
            "-alias",     self.name,
            "-storepass", self.password,
            "-keystore",  self.keystore
        ]
        if not run_command(command):
            raise RuntimeError("import of CA-signed cert failed")

    def generate_config(self, host, port, cqlport, keyspace, localdc):
        with open(self.config, 'w') as f:
            f.write("""{
                "host":"%s",
                "port":%d,
                "cql_port":%d,
                "keyspace":"%s",
                "localdc":"%s",
                "caCertLocation":"./%s",
                "keyLocation":"./%s",
                "certLocation":"./%s",
                "keyStoreLocation":"./%s",
                "keyStorePassword":"%s",
                "trustStoreLocation":"./%s",
                "trustStorePassword":"%s"
}""" % (host, port, cqlport, keyspace, localdc, "ca.crt", "key", "cert", os.path.basename(self.keystore), self.password, os.path.basename(self.truststore), self.password)) 
 
    def __repr__(self):
        return "%s(name=%s, filename=%s, size=%s, subject=%s)" \
            % (self.__class__.__name__, self.name, self.keystore, self.size, self.subject)


class OpensslSubject(Subject):
    def __str__(self):
        return "/CN=%s/OU=%s/O=%s/C=%s/" % (self.common_name, self.unit, self.organization, self.country)

class OpensslCertificate(object):
    def __init__(self, name, path, key, password, subject, valid = 365, common_name = None):
        self.name = name
        self.common_name = common_name or name
        self.base = os.path.abspath(path)
        self.filename = os.path.join(self.base, "%s.crt" % self.name)
        self.truststore = os.path.join(self.base, "truststore")
        self.config = os.path.join(self.base, "config.cf")
        self.key = key
        self.password = password
        self.subject = OpensslSubject(common_name, subject)
        self.valid = valid

        self.gen_config()

    def generate(self):
        if os.path.exists(self.filename):
            logging.warning("%s already exists, skipping certificate generation...", self.filename)
            return

        # Generate the CA certificate
        command = [
            "openssl",
            "req",
            "-x509",
            "-new",
            "-nodes",
            "-subj", str(self.subject),
            "-days", str(self.valid),
            "-key", self.key.filename,
            "-reqexts", "cndb_root",
            "-config", self.config,
            "-out", self.filename
        ]
        if not run_command(command):
            raise RuntimeError("CA certificate generation failed")

        if os.path.exists(self.truststore):
            logging.warn("%s already exists, skipping truststore generation...", self.filename)
            return

        # Import the CA certificate to a Java truststore
        # FIXME: -storepass should use :file or :env specifier to avoid exposing password to process list
        command = [
            "keytool",
            "-importcert",
            "-v",
            "-noprompt",
            "-trustcacerts",
            "-alias", "rootCa",
            "-file", self.filename,
            "-storepass", self.password,
            "-keystore", self.truststore
        ]
        if not run_command(command):
            raise RuntimeError("CA truststore generation failed")

    def gen_config(self):
        configs = ["/usr/local/ssl/openssl.cnf","/usr/lib/ssl/openssl.cnf","/etc/ssl/openssl.cnf"]
        for c in configs:
            if os.path.exists(c):
                with open(self.config, 'w') as f, open(c, 'r') as cf:
                    for line in cf:
                        f.write(line)
                    f.write("[cndb_root]")
                    f.write("keyUsage = critical,digitalSignature,keyEncipherment")
                    f.write("extendedKeyUsage = serverAuth,clientAuth")

    def __repr__(self):
        return "%s(name=%s, filename=%s, subject=%s, valid=%d)" \
            % (self.__class__.__name__, self.name, self.filename, self.subject, self.valid)


class OpensslKey(object):
    def __init__(self, name, path, size = 2048):
        self.name = name
        self.base = os.path.abspath(path)
        self.filename = os.path.join(self.base, "%s.key" % self.name)
        self.size = size

        mkdirs(self.base)

    def generate(self):
        if os.path.exists(self.filename):
            logging.warn("%s already exists, skipping key generation...", self.filename)
            return

        if not run_command(["openssl", "genrsa", "-out", self.filename, str(self.size)]):
            raise RuntimeError("CA key generation failed")
        
    def __repr__(self):
        return "%s(name=%s, filename=%s, size=%s)" % (self.__class__.__name__, self.name, self.filename, self.size)


class Authority(object):
    def __init__(self, base_directory, password, cert):
        self.password = password
        if self.password is None:
            raise RuntimeError("authority is missing mandatory password entry")

        self.base_directory = os.path.join(base_directory, "ca")
        self.key = OpensslKey("rootCa", self.base_directory)
        self.certificate = OpensslCertificate("rootCa", self.base_directory, self.key, self.password, cert)

    def generate(self):
        self.key.generate()
        self.certificate.generate()

    def __repr__(self):
        return "%s(key=%s, certifcate=%s)" % (self.__class__.__name__, self.key, self.certificate)

def run_command(command):
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT)
        for ln in output.splitlines(): logging.debug(ln)
        logging.debug("command succeeded: %s", " ".join(command))
    except subprocess.CalledProcessError as e:
        for ln in e.output.splitlines(): logging.error(ln)
        logging.error("command returned status %d: %s", e.returncode, " ".join(command))
        return False
    return True


def mkdirs(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Manage a certificate authority')
    parser.add_argument('-b', "--base_directory", type=str, default=".",
                        help="base directory for certs")

    parser.add_argument('-t', "--tenant", type=str, nargs='+', required=True,
                        help='One or more tenant id to upgrade (defalt will do all)')

    parser.add_argument('-s', "--http_service", type=bool, default=False, help="Serve files over http port %d" % PORT)

    parser.add_argument('-e', "--existing_ca_dir", type=str, default=None, help="A directory to copy root ca certs to")


    args = parser.parse_args()

    base_directory = args.base_directory
    if base_directory is None:
        parser.error("base_directory not specified")

    #make dir if not exists 
    mkdirs(base_directory)

    if args.existing_ca_dir is not None:
        shutil.copytree(args.existing_ca_dir, os.path.join(base_directory, "ca"))        

    authority = Authority(base_directory, "datastax", OpensslSubject("*.ingress.svc.cluster.local"))
    authority.generate()

    for tenant_id in args.tenant:
        keystore = Keystore(base_directory, authority, "client.%s.db.astra.datastax.com" % tenant_id, "datastax", OpensslSubject("client.%s.db.astra.datastax.com" % tenant_id))
        keystore.generate()
        keystore.generate_config("nginx.ingress.svc.cluster.local", 29080, 29042, "db1", "dc1")
        with zipfile.ZipFile(os.path.join(base_directory, "secure-bundle-%s.zip" % tenant_id), mode='w') as zf:
            print("adding cafile")
            zf.write(authority.key.filename, "ca.key")
            zf.write(authority.certificate.filename, "ca.crt")
            zf.write(authority.certificate.truststore, os.path.basename(authority.certificate.truststore))

            print("adding tenant certs")
            zf.write(keystore.keystore, os.path.basename(keystore.keystore))
            zf.write(keystore.keystore, os.path.basename(keystore.truststore))
            zf.write(keystore.crt,  "cert")
            zf.write(keystore.key,  "key")
            zf.write(keystore.csr, os.path.basename(keystore.csr))
            zf.write(keystore.config, os.path.basename(keystore.config))

    if args.http_service:
        os.chdir(base_directory)

        handler = http.server.SimpleHTTPRequestHandler
        with socketserver.TCPServer(("0.0.0.0", PORT), handler) as httpd:
            print("Server started at localhost:" + str(PORT))
            httpd.serve_forever()
